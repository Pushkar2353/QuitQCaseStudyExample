// <auto-generated />
using System;
using CaseStudyExample.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CaseStudyExample.Migrations
{
    [DbContext(typeof(CaseStudyDbContext))]
    partial class CaseStudyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CaseStudyExample.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CartQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductsProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("ItemQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Payments", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountToPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrdersOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrdersOrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ProductImagePath");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<int>("ProductStock")
                        .HasColumnType("int");

                    b.Property<string>("ProductUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CaseStudyExample.Models.ProductsInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastRestockDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextRestockDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsInventory");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Reviews", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductsProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Rating", "rating >= 1 AND rating <= 5");
                        });
                });

            modelBuilder.Entity("CaseStudyExample.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CaseStudyExample.Models.Administrator", b =>
                {
                    b.HasBaseType("CaseStudyExample.Models.Users");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("AdminPhoneNumber")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Customers", b =>
                {
                    b.HasBaseType("CaseStudyExample.Models.Users");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PinCode")
                        .HasMaxLength(6)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Users", t =>
                        {
                            t.Property("AddressLine1")
                                .HasColumnName("Customers_AddressLine1");

                            t.Property("AddressLine2")
                                .HasColumnName("Customers_AddressLine2");

                            t.Property("City")
                                .HasColumnName("Customers_City");

                            t.Property("Country")
                                .HasColumnName("Customers_Country");

                            t.Property("Gender")
                                .HasColumnName("Customers_Gender");

                            t.Property("PinCode")
                                .HasColumnName("Customers_PinCode");

                            t.Property("State")
                                .HasColumnName("Customers_State");

                            t.Property("Street")
                                .HasColumnName("Customers_Street");
                        });

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Sellers", b =>
                {
                    b.HasBaseType("CaseStudyExample.Models.Users");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GSTIN")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("PinCode")
                        .HasMaxLength(6)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("SellerPhoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasDiscriminator().HasValue("Seller");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Cart", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Products", null)
                        .WithMany("Cart")
                        .HasForeignKey("ProductsProductId");

                    b.HasOne("CaseStudyExample.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Users", null)
                        .WithMany("Cart")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Orders", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Users", null)
                        .WithMany("Orders")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Payments", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Orders", null)
                        .WithMany("Payments")
                        .HasForeignKey("OrdersOrderId");

                    b.HasOne("CaseStudyExample.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Users", null)
                        .WithMany("Payments")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Orders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Products", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Sellers", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("CaseStudyExample.Models.ProductsInventory", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Products", "Products")
                        .WithMany("ProductsInventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Reviews", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Products", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProductsProductId");

                    b.HasOne("CaseStudyExample.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CaseStudyExample.Models.Users", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Administrator", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Users", "Users")
                        .WithOne("Administrator")
                        .HasForeignKey("CaseStudyExample.Models.Administrator", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Customers", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Users", "Users")
                        .WithOne("Customers")
                        .HasForeignKey("CaseStudyExample.Models.Customers", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Sellers", b =>
                {
                    b.HasOne("CaseStudyExample.Models.Users", "Users")
                        .WithOne("Sellers")
                        .HasForeignKey("CaseStudyExample.Models.Sellers", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Categories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Orders", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Products", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("ProductsInventory");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Users", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Cart");

                    b.Navigation("Customers");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("CaseStudyExample.Models.Sellers", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
